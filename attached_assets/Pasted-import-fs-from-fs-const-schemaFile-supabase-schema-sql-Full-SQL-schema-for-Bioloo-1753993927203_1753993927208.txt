import fs from 'fs';

const schemaFile = 'supabase_schema.sql';

// ✅ Full SQL schema for Bioloop Hub
const schemaSQL = `
-- Bioloop Hub Database Schema

-- 1. Profiles Table
create table if not exists profiles (
  id uuid primary key references auth.users(id) on delete cascade,
  first_name text,
  last_name text,
  address text,
  role text not null default 'user',
  points int not null default 0,
  created_at timestamp default now()
);
alter table profiles enable row level security;
create policy "Users can view their profile" on profiles for select using (auth.uid() = id);
create policy "Users can update their profile" on profiles for update using (auth.uid() = id);

-- 2. Waste Types Table
create table if not exists waste_types (
  id uuid primary key default gen_random_uuid(),
  name text not null unique,
  point_value int not null default 0
);

-- 3. Waste Logs Table
create table if not exists waste_logs (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references profiles(id) on delete cascade,
  waste_type_id uuid references waste_types(id),
  weight_kg numeric(10,2) not null,
  image_url text,
  points_earned int default 0,
  status text default 'pending',
  created_at timestamp default now()
);
alter table waste_logs enable row level security;
create policy "Users can view their waste logs" on waste_logs for select using (auth.uid() = user_id);
create policy "Users can insert their waste logs" on waste_logs for insert with check (auth.uid() = user_id);

-- 4. Pickups Table
create table if not exists pickups (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references profiles(id) on delete cascade,
  scheduled_time timestamp not null,
  location text not null,
  status text default 'scheduled',
  created_at timestamp default now()
);
alter table pickups enable row level security;
create policy "Users can view their pickups" on pickups for select using (auth.uid() = user_id);
create policy "Users can insert their pickups" on pickups for insert with check (auth.uid() = user_id);
create policy "Users can update their pickups" on pickups for update using (auth.uid() = user_id);

-- 5. Rewards Table
create table if not exists rewards (
  id uuid primary key default gen_random_uuid(),
  user_id uuid references profiles(id) on delete cascade,
  reward_type text not null,
  points_redeemed int not null,
  status text default 'pending',
  created_at timestamp default now()
);
alter table rewards enable row level security;
create policy "Users can view their rewards" on rewards for select using (auth.uid() = user_id);
create policy "Users can insert their rewards" on rewards for insert with check (auth.uid() = user_id);

-- 6. Trigger: Auto Profile Creation
create or replace function handle_new_user()
returns trigger as $$
begin
  insert into profiles (id) values (new.id);
  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists create_profile_after_user on auth.users;
create trigger create_profile_after_user
after insert on auth.users
for each row execute procedure handle_new_user();

-- 7. Trigger: Auto Point Update on Waste Log Insert
create or replace function update_user_points()
returns trigger as $$
declare
  points_to_add int;
begin
  select point_value * new.weight_kg
  into points_to_add
  from waste_types
  where id = new.waste_type_id;

  update waste_logs
  set points_earned = points_to_add
  where id = new.id;

  update profiles
  set points = points + points_to_add
  where id = new.user_id;

  return new;
end;
$$ language plpgsql security definer;

drop trigger if exists add_points_after_log on waste_logs;
create trigger add_points_after_log
after insert on waste_logs
for each row execute procedure update_user_points();
`;

if (!fs.existsSync(schemaFile)) {
  fs.writeFileSync(schemaFile, schemaSQL);
  console.log(`✅ Created ${schemaFile} with full schema`);
} else {
  console.log(`ℹ️ ${schemaFile} already exists. No changes made.`);
}
